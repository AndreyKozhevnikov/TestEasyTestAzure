trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'dxT844058v1.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'EasyTest'

steps:
- task: NuGetToolInstaller@1

- task: DownloadSecureFile@1
  name: nugetConf
  inputs:
    secureFile: 'nuget.config'

- task: CmdLine@2
  inputs:
    script: |
      echo $(nugetConf.secureFilePath)
      xcopy $(nugetConf.secureFilePath)

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'config'
    nugetConfigPath: 'Nuget.config'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: EasyTest
  inputs:
    targetType: 'inline'
    script: |     
      $easyTestPath=".\dxT844058v1.Module\FunctionalTests\"
      $easyTestPathBin=$easyTestPath+"\Bin\"
      sqllocaldb start MSSQLLocalDB
      Nuget install DevExpress.EasyTest.TestExecutor -OutputDirectory $easyTestPath -configfile NuGet.config      
      New-Item -ItemType directory -Path $easyTestPathBin
      Get-ChildItem -Path $easyTestPath\* -Include *.dll,*.exe -Recurse | Where {$_.FullName -notlike "*\netstandard*\*"} | Copy-Item -Destination $easyTestPathBin
      Copy-Item "C:\Program Files (x86)\Microsoft.NET\Primary Interop Assemblies\Microsoft.mshtml.dll" -Destination $easyTestPathBin
      & $easyTestPathBin\TestExecutor.v19.2.exeÂ $easyTestPath
      Get-Content -Path $easyTestPath\TestsLog.xml
      if(Select-String -Pattern 'Result="Failed"', 'Result="Warning"' -Path $easyTestPath\TestsLog.xml) { exit 1 }

- task: PublishPipelineArtifact@1
  condition: succeededOrFailed()
  inputs:
    targetPath: '.\easytest\Bin'
    artifact: 'TestsResultFiles'
    publishLocation: 'pipeline'